version: '3'
silent: true
tasks:
  default:
    cmds:
      - task -l
    silent: true

  venv:
    desc: Make a new virtual environment
    cmds:
      - python3 -m venv .venv --prompt="ACTIVE_ZENDESK_ROLEPLAY"
      - source {{.TASKFILE_DIR}}/.venv/bin/activate
    internal: true

  run:dev:
    desc: Starts the Application and UI interfaces for local development
    dir: .
    cmds:
      - echo "Completing Pre-Start Environment Check For Development..."
      - source .envrc && doppler run -- python3 app.py & python3 ui.py
      - defer: rm -r ${TEMP_STATIC_DIR}
    interactive: false
    silent: false

  install:
    deps: [ venv ]
    cmds:
      - pip install poetry
      - poetry lock
      - poetry install --no-root
    silent: false

  freeze:
    desc: Pin current dependencies
    cmds:
      - doppler run  -- poetry sync
      - doppler run  -- poetry export --without dev,test --without-hashes --without-urls > ./requirements/base.txt
      - doppler run  -- poetry export  --without-hashes --without-urls > ./requirements/dev.txt
    generates:
      - ./requirements/dev.txt
      - ./requirements/base.txt
      - ./poetry.lock
    sources:
      - ./poetry.lock
      - ./requirements/dev.txt
      - ./requirements/base.txt
    silent: false

  run:test:
    dir: .
    desc: Run tests
    cmds:
      - python3  run/manage.py test applications.API

    requires:
      vars:
        - DOPPLER_TOKEN
        - PATH_TO_DB_ROOT_CERT

  run:prod:
    dir: .

    desc: Command to Start Production Level Services including Install requirements, apply migrations, then start development server
    cmds:
      - echo 'Starting Production Level Services...'
      - echo 'Installing dependencies'
      - task: install

      - echo 'Applying migrations...'
      - task: db_sync

      - echo 'Starting server...'
      - python3 -m gunicorn --workers=2 --threads=2 core.wsgi:application --bind 0.0.0.0:{{or .CLI_ARGS 8080}}

  build-image:
    desc: Build Docker Image
    dir: "{{.TASKFILE_DIR}}/.deploy"
    cmds:
      - docker buildx build --platform linux/amd64,linux/arm64 --push --build-arg DOPPLER_TOKEN=$DOPPLER_TOKEN -t tech-assessment:latest .
    requires:
      vars:
        - DOPPLER_TOKEN
  lint:lint:
    desc: Run all linting and formatting tools
    dir: .
    cmds:
      - echo "🔍 Running Python linting and formatting..."
      - echo "🧹 Running autoflake (unused imports/variables check)..."
      - .venv/bin/autoflake --check --recursive --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys --ignore-init-module-imports .
      - echo "📋 Running isort (import sorting)..."
      - .venv/bin/isort . --check-only --diff
      - echo "⚫ Running black (code formatting)..."
      - .venv/bin/black . --check --diff
      - echo "🚀 Running ruff (fast linting)..."
      - .venv/bin/ruff check .
      - echo "🔧 Running pylint (comprehensive linting)..."
      - .venv/bin/pylint **/*.py --load-plugins=pylint_django,pylint_celery --django-settings-module=core.settings
      - echo "🔒 Running bandit (security linting)..."
      - .venv/bin/bandit -r . -f json --exclude=./tests,./venv,./.venv
      - echo "🎯 Running mypy (type checking)..."
      - .venv/bin/mypy .
      - echo "✅ All linting checks completed!"
    silent: false
    interactive: false
  lint:fix:
    desc: Automatically fix linting and formatting issues
    dir: .
    cmds:
      - echo "🔧 Auto-fixing Python linting and formatting issues..."
      - echo "🧹 Running autoflake (removing unused imports/variables)..."
      - cmd: .venv/bin/autoflake --in-place --recursive --remove-all-unused-imports --remove-unused-variables --remove-duplicate-keys --ignore-init-module-imports .
        ignore_error: true
      - echo "📋 Running isort (import sorting)..."
      - cmd: .venv/bin/isort .
        ignore_error: true
      - echo "⚫ Running black (code formatting)..."
      - cmd: .venv/bin/black .
        ignore_error: true
      - echo "🚀 Running ruff (auto-fix)..."
      - cmd: .venv/bin/ruff check . --fix
        ignore_error: true
      - echo "✅ Auto-fix completed! Run 'task lint' to check remaining issues."
    silent: false
    interactive: false
