name: CI Pipeline
on:
  push:
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      python-version: ${{ env.PYTHON_VERSION }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Cache virtual environment
        uses: actions/cache@v4
        id: venv-cache
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements/dev.txt') }}

      - name: Create virtual environment
        if: steps.venv-cache.outputs.cache-hit != 'true'
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install poetry 
          poetry lock
          poetry install

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: Restore virtual environment
        uses: actions/cache@v4
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements/dev.txt') }}

      - name: Fetch environment variables
        uses: dopplerhq/secrets-fetch-action@v1.1.3
        with:
          doppler-token: ${{ env.DOPPLER_TOKEN }}
          inject-env-vars: true
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run linters
        run: |
          source venv/bin/activate
          task lint:lint
  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12' ]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt

      - name: Fetch environment variables
        uses: dopplerhq/secrets-fetch-action@v1.1.3
        with:
          doppler-token: ${{ secrets.DOPPLER_TOKEN }}
          inject-env-vars: true
      - name: Install Doppler CLI
        uses: dopplerhq/cli-action@v2
      - name: Install Task
        uses: arduino/setup-task@v2
        with:
          version: 3.x
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Run tests
        run: |
          source venv/bin/activate
          task run:test
      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.11'
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          fail_ci_if_error: false

  security-scan:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ needs.setup.outputs.python-version }}
          cache: 'pip'

      - name: Restore virtual environment
        uses: actions/cache@v4
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('requirements/dev.txt') }}

      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}
      - name: Run Bandit Report
        run: |
          source venv/bin/activate
          # Install security tools if not in requirements
          pip install safety bandit

          echo "Running static security analysis..."
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security scan results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: bandit-report.json

  build-status:
    if: always()
    needs: [ lint, test, security-scan ]
    runs-on: ubuntu-latest
    steps:
      - name: Check build status
        run: |
          if [[ "${{ needs.lint.result }}" == "success" && 
                "${{ needs.test.result }}" == "success" && 
                "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "✅ All checks passed!"
            exit 0
          else
            echo "❌ Some checks failed:"
            echo "Lint: ${{ needs.lint.result }}"
            echo "Test: ${{ needs.test.result }}" 
            echo "Security: ${{ needs.security-scan.result }}"
            exit 1
          fi
